#!/usr/bin/env python3

import rospy
import numpy as np
import cv2
import os
import time

from threading import Thread
from nav_msgs.msg import OccupancyGrid
from rto_map_server.srv import GetMap
from rto_costmap_generator.srv import SwitchMaps
from sensor_msgs.msg import LaserScan 


# TODO: Increase performance of _padd_static_map() -> constructing mask takes most of the time
#       worse performance: np.greater()
# TODO: Think about use of threads again.
# TODO: Do we need a mutex for a service call?
# TODO: Add service for changing global costmap? Static?
# TODO: rospy.Time.now() seems to work now. Check also map_server


# Create wrapper for easy timing of methods by using a decorator
def timed(func):
    def wrapper(*args):
        if not log_times:
            return func(*args)
        time_start = time.time()
        out = func(*args)
        time_end = time.time()
        time_took = time_end - time_start
        rospy.loginfo('Method {} from map gen took {}s.'.format(func.__name__, time_took))
        return out
    return wrapper

# Create wrapper for easy threading by using a decorator
def threaded(fn):
    def wrapper(*args):
        Thread(target=fn, args=args).start()
    return wrapper


class CostmapGenerator():
    """
    Class used for initialization of a node that is responsible for generating costmaps.

    Global costmap: OccupancyGrid based on static map from map server that has been padded in order to allow
                    the use of a point representation of the mobile robot for path planning. 
                    There exist two types of padding: hard (val: 100) and soft padding (val: < 100). 
                    Hard padded cells should under no circumstances be  visited by the robot while soft padded 
                    cells can be visited by the robot. Soft padded cells increase the cost that is estimated by 
                    the planning algorithm.

    Local costmap: TODO

    The CostmapGenerator class implements a service called 'switch_maps'.
    @request: Number of map (1, 2, etc.)
    @response: Success
    """

    def __init__(self):
        """
        Method for initialization of an instance of the CostmapGenerator class. It for example
        reads in parameters from a parameter server, initializes the publisher and estimates the 
        decay of soft padding based on the decay type.
        """
        # Get parameters from parameter server
        self.map_nr = rospy.get_param('~init_map_nr')
        self.hard_padding = rospy.get_param('~global_costmap')['robot_diameter']/2 + \
             rospy.get_param('~global_costmap')['safety_distance']      # Unit: m
        self.padded_val = rospy.get_param('~global_costmap')['padded_val']
        self.decay_type = rospy.get_param('~global_costmap')['decay_type']
        self.soft_padding = rospy.get_param('~global_costmap')['decay_distance']    # Unit: m
        self.apply_soft_padding = rospy.get_param('~global_costmap')['apply_soft_padding']
        self.log_times = rospy.get_param('~log_times')
    

        # Init publisher 
        self.pub_global_costmap = rospy.Publisher('/global_costmap', OccupancyGrid, queue_size=10 ,latch=True)

        # Get static map from map server via request to service 'get_map'
        self._call_get_map_srv()

        # Transfer 'soft' and 'hard' padding from m in cell units
        self.hard_padding = np.ceil(self.hard_padding / self.static_map.info.resolution)
        decay_steps = np.ceil(self.soft_padding / self.static_map.info.resolution)

        # Set val of soft_padding based on decay type
        if self.decay_type == 'exponential':
            self.soft_padding = [int(100*np.exp(-x)-1) for x in np.linspace(0, 3.9, decay_steps)]
        elif self.decay_type == 'reciprocal':
            self.soft_padding = [int(1/(x + 0.0101)) for x in np.linspace(0, 0.9891, decay_steps)]
        elif self.decay_type == 'linear':
            self.soft_padding = [int((100 - x)) for x in np.linspace(1, 99, decay_steps)]
        else:
            rospy.logerr("Decay type '{}' is not defined.".format(self.decay_type))

        # Start the service to make the costmap gen switch maps
        self._start_switchmaps_service()

        # Padd the static map based on parameters
        self._padd_static_map()

        # Publish padded map on topic /global_costmap (latched)
        self.static_map.header.stamp = rospy.Time.now()
        self.pub_global_costmap.publish(self.static_map)


    def _call_get_map_srv(self):
        """
        Private method for calling the 'get_map' service from the map server to obtain a static map, 
        which represents the basis of a costmap.

        @return: A boolean indicating the success of the service call
        """
        rospy.wait_for_service('get_map')
        get_map = rospy.ServiceProxy('get_map', GetMap)
        try:
            self.static_map = get_map(self.map_nr).map
            return True
        except rospy.ServiceException:
            rospy.logerr("Costmap generator could not receive map from map server.")
            return False


    @threaded
    def _start_switchmaps_service(self):
        """
        Private method that runs in a seperate thread and provides a ROS service.
        """
        rospy.Service('switch_maps', SwitchMaps, self._handle_switch_maps)
        rospy.spin()
        

    def _handle_switch_maps(self, req):
        """
        Handler method for the service 'switch_maps', which changes the map used for costmap
        generation.

        @param req: An integer referring to the map to switch to.
        @return: A boolean indicating the success of the operation.
        """
        self.map_nr = req.map_nr_switch
        success = self._call_get_map_srv()
        if success == True:
            rospy.loginfo('Map gen changed map in map server to: map{}.'.format(self.map_nr))

            self._padd_static_map()

            self.static_map.header.stamp = rospy.Time.now()
            self.pub_global_costmap.publish(self.static_map)

        return success

    @timed
    def _padd_static_map(self):
        """
        Private method that applies hard and soft padding to the static map.
        """
        global_costmap = np.array(self.static_map.data, dtype=np.int8).reshape(self.static_map.info.height, -1)

        # Get index of occupied cells
        occupied_index = np.where(global_costmap == 100)
        #rospy.loginfo(len(occupied_index[0]))

        # Loop over occupied cells
        for coord in zip(occupied_index[0], occupied_index[1]):
            x_occu, y_occu = coord

            # Use 'open grid' function to create a 'circular' mask for efficient padding
            grid = np.ogrid[-x_occu:self.static_map.info.height-x_occu, -y_occu:self.static_map.info.width-y_occu]

            # Apply 'hard padding'
            mask_hard_padding = grid[1]*grid[1] + grid[0]*grid[0] <= self.hard_padding * self.hard_padding
            global_costmap[mask_hard_padding] = self.padded_val
            
            if self.apply_soft_padding == True:
                # Apply 'soft padding' for each step in the decay of the cost
                for idx, val in enumerate(self.soft_padding, start=1):
                    masks_soft_padding = ((grid[1]*grid[1] + grid[0]*grid[0] <= (self.hard_padding + idx) * (self.hard_padding + idx))) \
                        & (global_costmap < val) & (global_costmap > -1) # delete last statement to inc. performance
                    global_costmap[masks_soft_padding] = val
            
        # Uncomment for testing and to receive an image of the global_costmap
        #cv2.imwrite('map_padded_comp.jpg', global_costmap.astype(np.uint8))
        #print(np.unique(global_costmap))

        self.static_map.data = global_costmap.ravel()


if __name__ == "__main__":

    # Initialize a ROS node named map_server
    rospy.init_node('costmap_generator')

    log_times = rospy.get_param('~log_times')

    costmap_gen = CostmapGenerator()
