#!/usr/bin/env python3

import rospy
import numpy as np
import cv2
import os
import time
import tf

from threading import Thread, Lock
from nav_msgs.msg import OccupancyGrid, Odometry
from rto_map_server.srv import GetMap
from geometry_msgs.msg import PoseWithCovarianceStamped, PointStamped, PoseStamped
from rto_costmap_generator.srv import SwitchMaps
from sensor_msgs.msg import LaserScan

# global costmap
# TODO: Increase performance of _padd_static_map() -> constructing mask takes most of the time
#       worse performance: np.greater()
# TODO: Think about use of threads again.
# TODO: Do we need a mutex for a service call?
# TODO: Add service for changing global costmap? Static?
# TODO: rospy.Time.now() seems to work now. Check also map_server

# local costmap
# TODO: Perfectly synchronize messages from /scan and /amcl_pose
# -> doesnt work yet, since not correctly implemented when using the existing amcl node
#    (should work on our amcl node)


# Create wrapper for easy timing of methods by using a decorator
def timed(func):
    def wrapper(*args):
        if not log_times:
            return func(*args)
        time_start = time.time()
        out = func(*args)
        time_end = time.time()
        time_took = time_end - time_start
        rospy.loginfo('Method {} from map gen took {}s.'.format(func.__name__, time_took))
        return out
    return wrapper

# Create wrapper for easy threading by using a decorator
def threaded(fn):
    def wrapper(*args):
        Thread(target=fn, args=args).start()
    return wrapper


class CostmapGenerator():
    """
    Class used for initialization of a node that is responsible for generating costmaps.

    Global costmap: OccupancyGrid based on static map from map server that has been padded in order to allow
                    the use of a point representation of the mobile robot for path planning. 
                    There exist two types of padding: hard (val: 100) and soft padding (val: < 100). 
                    Hard padded cells should under no circumstances be  visited by the robot while soft padded 
                    cells can be visited by the robot. Soft padded cells increase the cost that is estimated by 
                    the planning algorithm.

    Local costmap: TODO

    The CostmapGenerator class implements a service called 'switch_maps'.
    @request: Number of map (1, 2, etc.)
    @response: Success
    """

    def __init__(self):
        """
        Method for initialization of an instance of the CostmapGenerator class. It for example
        reads in parameters from a parameter server, initializes the publisher and estimates the 
        decay of soft padding based on the decay type.
        """
        # Init mutex
        self.lock = Lock()

        # Get parameters from parameter server
        self.map_nr = rospy.get_param('~init_map_nr')
        self.odometry_pose = rospy.get_param('~odometry_pose')

        self.hard_padding = rospy.get_param('~global_costmap')['robot_diameter']/2 + \
             rospy.get_param('~global_costmap')['safety_distance']      # Unit: m
        self.padded_val = rospy.get_param('~global_costmap')['padded_val']
        self.decay_type = rospy.get_param('~global_costmap')['decay_type']
        self.soft_padding = rospy.get_param('~global_costmap')['decay_distance']    # Unit: m
        self.apply_soft_padding = rospy.get_param('~global_costmap')['apply_soft_padding']

        self.lc_length = rospy.get_param('~local_costmap')['length']
        self.lc_freq = rospy.get_param('~local_costmap')['frequency']
        self.lc_freq_scan = rospy.get_param('~local_costmap')['frequency_scan']

        # Init publisher
        self.pub_global_costmap = rospy.Publisher('/global_costmap', OccupancyGrid, queue_size=10 ,latch=True)
        self.pub_local_costmap = rospy.Publisher('/local_costmap', OccupancyGrid, queue_size=10 ,latch=False)

        # Get static map from map server via request to service 'get_map'
        self._call_get_map_srv()

        # Transfer 'soft' and 'hard' padding from m in cell units
        self.hard_padding = np.ceil(self.hard_padding / self.static_map.info.resolution)
        decay_steps = np.ceil(self.soft_padding / self.static_map.info.resolution)

        # Set val of soft_padding based on decay type
        if self.decay_type == 'exponential':
            self.soft_padding = [int(100*np.exp(-x)-1) for x in np.linspace(0, 3.9, decay_steps)]
        elif self.decay_type == 'reciprocal':
            self.soft_padding = [int(1/(x + 0.0101)) for x in np.linspace(0, 0.9891, decay_steps)]
        elif self.decay_type == 'linear':
            self.soft_padding = [int((100 - x)) for x in np.linspace(1, 99, decay_steps)]
        else:
            rospy.logerr("Decay type '{}' is not defined.".format(self.decay_type))

        # Start the service to make the costmap gen switch maps
        self._start_switchmaps_service()

        # Padd the static map based on parameters
        self._padd_static_map()

        # Publish padded map on topic /global_costmap (latched)
        self.static_map.header.stamp = rospy.Time.now()
        self.pub_global_costmap.publish(self.static_map)

        # Estimate length of the grid map in grid cells
        lc_grid_length = int(np.round((self.lc_length / self.static_map.info.resolution), 0))
        # Number has to be uneven so that robot will be located in exactelly the middle
        if lc_grid_length % 2 == 0:
            lc_grid_length += 1

        # Init instance variables
        self.current_pose = (0, 0, 0)
        self.record = True

        # Init subscribers
        rospy.Subscriber('/scan', LaserScan, self._cb_scan)

        if self.odometry_pose == False:
            rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self._cb_current_pose)
        else:
            rospy.Subscriber('/odom', Odometry, self._cb_current_pose)


        # Prepare local_costmap for publishing
        self.local_costmap = OccupancyGrid()
        self.local_costmap.header.stamp = rospy.Time.now()
        self.local_costmap.header.frame_id = 'map'  # should be map frame here
        self.local_costmap.info.resolution = self.static_map.info.resolution
        self.local_costmap.info.height = lc_grid_length
        self.local_costmap.info.width = lc_grid_length
        self.local_costmap.info.origin.position.x = self.current_pose[0] - self.lc_length / 2 # Take in account that robot is in the middle of the map
        self.local_costmap.info.origin.position.y = self.current_pose[1] - self.lc_length / 2
        self.local_costmap.info.origin.position.z = 0
        self.local_costmap.info.origin.orientation.x = 0
        self.local_costmap.info.origin.orientation.y = 0
        self.local_costmap.info.origin.orientation.z = 0
        self.local_costmap.info.origin.orientation.w = 1

        # Init tf listener
        self.listener = tf.TransformListener()

    def get_tf_map_odom(self):
        '''
        This function is used to get realtime tf transform information
        '''
        try:
            self.listener.waitForTransform('/map', '/odom', rospy.Time(0), rospy.Duration(10.0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            rospy.logerr("Failed to recieve the transform for map to odom")

    def _cb_current_pose(self, msg):
        self.record = True

        self.get_tf_map_odom()

        msg_new = PoseStamped()
        msg_new.pose.position = msg.pose.pose.position
        msg_new.pose.orientation = msg.pose.pose.orientation
        msg_new.header.frame_id= '/odom'
        msg_new.header.stamp = self.listener.getLatestCommonTime('/map', '/odom')
        msg = self.listener.transformPose('/map', msg_new)
        quaternion = (msg.pose.orientation.x, msg.pose.orientation.y, \
            msg.pose.orientation.z, msg.pose.orientation.w,)
        euler = tf.transformations.euler_from_quaternion(quaternion)

        self.lock.acquire()
        self.current_pose = (msg.pose.position.x, msg.pose.position.y, euler[2])
        self.lock.release()

        #print('new message income')

        rospy.sleep(1/(self.lc_freq_scan - 1)) # To ensure that pose and scan msgs are alligned.
        self.record = False

    def _cb_scan(self, msg):
        if self.record == True:
            self.lock.acquire()
            self.scan = msg
            self.lock.release()


    def _call_get_map_srv(self):
        """
        Private method for calling the 'get_map' service from the map server to obtain a static map, 
        which represents the basis of a costmap.

        @return: A boolean indicating the success of the service call
        """
        rospy.wait_for_service('get_map')
        get_map = rospy.ServiceProxy('get_map', GetMap)
        try:
            self.static_map = get_map(self.map_nr).map
            return True
        except rospy.ServiceException:
            rospy.logerr("Costmap generator could not receive map from map server.")
            return False


    @threaded
    def _start_switchmaps_service(self):
        """
        Private method that runs in a seperate thread and provides a ROS service.
        """
        rospy.Service('switch_maps', SwitchMaps, self._handle_switch_maps)
        rospy.spin()


    def _handle_switch_maps(self, req):
        """
        Handler method for the service 'switch_maps', which changes the map used for costmap
        generation.

        @param req: An integer referring to the map to switch to.
        @return: A boolean indicating the success of the operation.
        """
        self.map_nr = req.map_nr_switch
        success = self._call_get_map_srv()
        if success == True:
            rospy.loginfo('Map gen changed map in map server to: map{}.'.format(self.map_nr))

            self._padd_static_map()

            self.static_map.header.stamp = rospy.Time.now()
            self.pub_global_costmap.publish(self.static_map)

        return success


    @timed
    def _padd_static_map(self):
        """
        Private method that applies hard and soft padding to the static map.
        """
        global_costmap = np.array(self.static_map.data, dtype=np.int8).reshape(self.static_map.info.height, -1)

        # Get index of occupied cells
        occupied_index = np.where(global_costmap == 100)
        #rospy.loginfo(len(occupied_index[0]))

        # Loop over occupied cells
        for coord in zip(occupied_index[0], occupied_index[1]):
            x_occu, y_occu = coord

            # Use 'open grid' function to create a 'circular' mask for efficient padding
            grid = np.ogrid[-x_occu:self.static_map.info.height-x_occu, -y_occu:self.static_map.info.width-y_occu]

            # Apply 'hard padding'
            mask_hard_padding = grid[1]*grid[1] + grid[0]*grid[0] <= self.hard_padding * self.hard_padding
            global_costmap[mask_hard_padding] = self.padded_val

            if self.apply_soft_padding == True:
                # Apply 'soft padding' for each step in the decay of the cost
                for idx, val in enumerate(self.soft_padding, start=1):
                    masks_soft_padding = ((grid[1]*grid[1] + grid[0]*grid[0] <= (self.hard_padding + idx) * (self.hard_padding + idx))) \
                        & (global_costmap < val) & (global_costmap > -1) # Delete last statement to inc. performance
                    global_costmap[masks_soft_padding] = val

        # Uncomment for testing and to receive an image of the global_costmap
        #cv2.imwrite('map_padded_comp.jpg', global_costmap.astype(np.uint8))
        #print(np.unique(global_costmap))

        self.static_map.data = global_costmap.ravel()

    def get_tf_hokuyo_base(self):
        '''
        This function is used to get realtime tf transform information
        '''
        try:
            self.listener.waitForTransform('/hokuyo_link', '/base_link', rospy.Time(0), rospy.Duration(10.0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            rospy.logerr("Failed to recieve the transform for hokuyo_link to base_link")

    # TODO: Finish
    def generate_local_costmap(self):

        while not rospy.is_shutdown():
            # Get current values from subscribed topics
            rospy.wait_for_message('/scan', LaserScan)
            ranges = self.scan.ranges
            current_pose = self.current_pose
            min_angle = self.scan.angle_min
            angle_inc = self.scan.angle_increment


            # Create PointStamped message for transformation between frames
            self.get_tf_hokuyo_base()
            point_hokuyo_frame = PointStamped()
            point_hokuyo_frame.header.frame_id = 'hokuyo_link'
            point_hokuyo_frame.header.stamp = rospy.Time.now()
            point_hokuyo_frame.point.z = 0

            # Set robot position to the middle of the grid map
            local_costmap_middle = int(self.local_costmap.info.height/2)
            robot_pos = (local_costmap_middle, local_costmap_middle)

            local_costmap = np.zeros((self.local_costmap.info.height, self.local_costmap.info.height), dtype=np.int8)

            for idx, element in enumerate(ranges):

                # TODO: Somehow transform to baselink, before? necessary?

                # Check if element would be in local_costmap
                if element < self.lc_length/2: #np.sqrt(2*(self.lc_length/2)**2):
                    angle = min_angle + idx * angle_inc

                    # Get offset to laser sensor ('hokuyo_link' frame) in map frame
                    dx = np.cos(np.pi/2 - (angle + current_pose[2])) * element
                    dy = np.sin(np.pi/2 - (angle + current_pose[2])) * element

                    point_hokuyo_frame.point.x = dx
                    point_hokuyo_frame.point.y = dy

                    # Get transform point into 'base_link' frame
                    point_base_frame = self.listener.transformPoint('base_link', point_hokuyo_frame)

                    point = (int(np.round(point_base_frame.point.x / self.local_costmap.info.resolution, 0)), \
                        int(np.round(point_base_frame.point.y / self.local_costmap.info.resolution, 0)))

                    # Mark sensed cells as occupied.
                    try:
                        local_costmap[robot_pos[0] + point[0], robot_pos[1] + point[1]] = 100
                    except:
                        pass




                    #print(point)
            #print('---------------------------------')


            # Publish local_costmap with robot in its center
            self.local_costmap.info.origin.position.x = current_pose[0] - self.lc_length / 2
            self.local_costmap.info.origin.position.y = current_pose[1] - self.lc_length / 2
            self.local_costmap.data = local_costmap.ravel()
            self.pub_local_costmap.publish(self.local_costmap)

            rospy.sleep(1/self.lc_freq)


if __name__ == "__main__":

    # Initialize a ROS node named map_server
    rospy.init_node('costmap_generator')

    log_times = rospy.get_param('~log_times')

    costmap_gen = CostmapGenerator()
    costmap_gen.generate_local_costmap()
