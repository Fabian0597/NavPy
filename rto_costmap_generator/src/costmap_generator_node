#!/usr/bin/env python3

import rospy
import numpy as np
import cv2
import os

from threading import Thread
from nav_msgs.msg import OccupancyGrid
from rto_map_server.srv import GetMap
from rto_costmap_generator.srv import SwitchMaps
from sensor_msgs.msg import LaserScan 


# TODO: Use a latched topic.
# TODO: Think about use of threads again.
# TODO: Do we need a mutex for a service call?
# TODO: Add service for changing global costmap? Static?


# Create wrapper for easy threading by using a decorator
def threaded(fn):
    def wrapper(*args):
        Thread(target=fn, args=args).start()
    return wrapper


class CostmapGenerator():

    def __init__(self):

        # Get parameters from parameter server
        self.map_nr = rospy.get_param('~init_map_nr')
        self.hard_padding = rospy.get_param('~global_costmap')['robot_diameter']/2 + \
             rospy.get_param('~global_costmap')['safety_distance']      # Unit: m
        self.padded_val = rospy.get_param('~global_costmap')['padded_val']
        self.decay_type = rospy.get_param('~global_costmap')['decay_type']
        self.soft_padding = rospy.get_param('~global_costmap')['decay_distance']    # Unit: m

        # Init publisher 
        self.pub_global_costmap = rospy.Publisher('/global_costmap', OccupancyGrid, queue_size=10 ,latch=True)

        # Get static map from map server via request to service 'get_map'
        self._call_get_map_srv()

        # Transfer 'soft' and 'hard' padding from m in cell units
        self.hard_padding = np.ceil(self.hard_padding / self.static_map.info.resolution)
        decay_steps = np.ceil(self.soft_padding / self.static_map.info.resolution)

        # Set val of soft_padding based on decay type
        if self.decay_type == 'exponential':
            self.soft_padding = [int(100*np.exp(-x)-1) for x in np.linspace(0, 3.9, decay_steps)]
        elif self.decay_type == 'reciprocal':
            self.soft_padding = [int(1/(x + 0.0101)) for x in np.linspace(0, 0.9891, decay_steps)]
        elif self.decay_type == 'linear':
            self.soft_padding = [int((100 - x)) for x in np.linspace(1, 99, decay_steps)]
        else:
            rospy.logerr("Decay type '{}' is not defined.".format(self.decay_type))

        # Start the service to make the costmap gen switch maps
        self._start_switchmaps_service()

        # Padd the static map based on parameters
        self._padd_static_map()

        # TODO: publish map once on latched topic. 


    def _call_get_map_srv(self):
        rospy.wait_for_service('get_map')
        get_map = rospy.ServiceProxy('get_map', GetMap)
        try:
            self.static_map = get_map(self.map_nr).map
            return True
        except rospy.ServiceException:
            rospy.logerr("Costmap generator could not receive map from map server.")
            return False


    @threaded
    def _start_switchmaps_service(self):
        rospy.Service('switch_maps', SwitchMaps, self._handle_switch_maps)
        rospy.spin()
        

    def _handle_switch_maps(self, req):
        self.map_nr = req.map_nr_switch
        sucess = self._call_get_map_srv()
        if sucess == True:
            rospy.loginfo('Map gen changed map in map server to: map{}.'.format(self.map_nr))
        return sucess


    def _padd_static_map(self):
        global_costmap = np.array(self.static_map.data, dtype=np.int8).reshape(self.static_map.info.height, -1)

        # Get index of occupied cells
        occupied_index = np.where(global_costmap == 100)

        # Loop over occupied cells
        for coord in zip(occupied_index[0], occupied_index[1]):
            x_occu, y_occu = coord

            # Use 'open grid' function to create a 'circular' mask for efficient padding
            grid = np.ogrid[-x_occu:self.static_map.info.height-x_occu, -y_occu:self.static_map.info.width-y_occu]

            # Apply 'hard padding'
            mask_hard_padding = grid[1]*grid[1] + grid[0]*grid[0] <= self.hard_padding * self.hard_padding
            global_costmap[mask_hard_padding] = self.padded_val
            

            # Apply 'soft padding' for each step in the decay of the cost
            for idx, val in enumerate(self.soft_padding, start=1):
                masks_soft_padding = ((grid[1]*grid[1] + grid[0]*grid[0] <= (self.hard_padding + idx) * (self.hard_padding + idx))) \
                    & (global_costmap < val)
                global_costmap[masks_soft_padding] = val




        # Uncomment to reveice an image of the global_costmap
        cv2.imwrite('map_padded_comp.jpg', global_costmap)
        #print(global_costmap.ravel().tolist())


        

    def run(self):
        #rospy.spin()
        while not rospy.is_shutdown():
            print('running')
            rospy.sleep(1)
        pass



if __name__ == "__main__":

    # Initialize a ROS node named map_server
    rospy.init_node('costmap_generator')

    costmap_gen = CostmapGenerator()
