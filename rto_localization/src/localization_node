#!/usr/bin/env python3
import rospy
import tf
import tf.transformations as transform
from std_msgs.msg import String, Header, ColorRGBA
from nav_msgs.msg import OccupancyGrid, MapMetaData, Odometry
from geometry_msgs.msg import Twist, PoseStamped, Point, PointStamped
from sensor_msgs.msg import LaserScan
from visualization_msgs.msg import Marker, MarkerArray
from math import sqrt, cos, sin, pi, atan2, inf

from threading import Thread, Lock
from math import pi, log, exp
import random
import numpy as np
import sys
import pickle

from rto_map_server.srv import GetMap

class Particle(object):
    def __init__(self, id, x,y, yaw):
        self.x = x
        self.y = y
        self.id = id
        self.yaw = yaw

class ParticleFilter(object):
    
    # initialize object of ParticleFilter and set all the parameters
    def __init__(self, num_particles, occ_grid_map,
                 laser_min_range, laser_max_range, laser_min_angle, laser_max_angle, subsampled_angles, eval_beams, 
                 dynamics_translation_noise_std_dev,
                 dynamics_orientation_noise_std_dev,
                 beam_range_measurement_noise_std_dev):


        self.num_particles = num_particles

        # call a cell in self.ogm by self.ogm[x,y]
        self.ogm = occ_grid_map
        self.ogm_map = self.ogm_map = np.transpose(np.asarray(occ_grid_map.map.data, dtype=np.int8).reshape(occ_grid_map.map.info.width, occ_grid_map.map.info.height))
        
        # Workspace boundaries
        """
        TODO: check if x = width and y = height

        """
        self.xmin = 0
        self.xmax = occ_grid_map.map.info.height-1
        self.ymin = 0
        self.ymax = occ_grid_map.map.info.width-1

        # laser setup
        self.laser_max_angle = laser_max_angle
        self.laser_min_angle = laser_min_angle
        self.laser_max_range = laser_max_range
        self.laser_min_range = laser_min_range
        self.subsampled_angles = subsampled_angles

        #tf Transform
        self.t = tf.Transformer(True, rospy.Duration(10.0))
        self.listener = tf.TransformListener()

        # Std deviation of noise affecting translation in the dynamics model for particles
        self.dynamics_translation_noise_std_dev = dynamics_translation_noise_std_dev

        # Std deviation of noise affecting orientation in the dynamics model for particles
        self.dynamics_orientation_noise_std_dev = dynamics_orientation_noise_std_dev

        # Std deviation of noise affecting measured range from the laser measurement model
        self.beam_range_measurement_noise_std_dev = beam_range_measurement_noise_std_dev

        # Number of laser beams used during the measurement update
        self.eval_beams = eval_beams

        # list of particles and corresponding weights of length num_particles
        self.particles = []
        self.weights = []
    
    #function which transforms a real x,y cooridinate into the location of a cell in the ogm
    def _coordinates_to_grid_transform(self ,x , y):
        grid_x = int(x-self.ogm.map.info.origin.position.x/self.ogm.map.info.resolution)
        grid_y = int(y-self.ogm.map.info.origin.position.y/self.ogm.map.info.resolution)
        grid_x_in_xrange = min(max(0, grid_x), self.xmax)
        grid_y_in_yrange = min(max(0, grid_y), self.ymax)
        return grid_x_in_xrange, grid_y_in_yrange
        

    # function which randomly samples x,y positions in the free space of the map
    def _get_random_free_space(self):
        while True:
            x_random = np.random.uniform(self.xmin, self.xmax)
            y_random = np.random.uniform(self.ymin, self.ymax)
            x, y = self._coordinates_to_grid_transform(x_random, y_random)
            if x != 100 and y != 100:
                break
        yaw = np.random.uniform(0,2*pi)
        return x, y, yaw

    # function which initilizes num_particles of particles
    def init_particles(self):
        for i in range(self.num_particles):
            x, y, yaw = self._get_random_free_space()
            particle = Particle(i, x, y, yaw)
            self.particles.append(particle)

    # function which updates the particle it includes prediction, update
    # from there it calculates a weight for each particle which is used for resampling 
    def handle_observation(self, laser_scan_msg, dt):

        """
        just random function call to check whether the functions work
        """
        self.get_prediction_error(laser_scan_msg)
        

    # resample a new set oof particles from the old particles by considering their weights calculated earlier
    def resample(self):
        pass    

    # calculates the laserscans the robot would deliver in the pose (x,y,yaw) of the particle
    def get_laser_scan_for_particle(self, x, y, yaw):

        particle_ranges = []
        step = self.ogm.map.info.resolution
        for i in self.subsampled_angles:
            angle = i+yaw
            distance = self.laser_min_range
            check_if_obstacle_is_sensed = 0
            while distance < self.laser_max_range:
                x_scan = x + cos(angle)*distance
                y_scan = y + sin(angle)*distance
                x_grid, y_grid = self._coordinates_to_grid_transform(x_scan, y_scan)
                
                """
                TODO:check if when x_scan and y_scan is outside of x_min, x_max, y_min, y_max what would the robot sense? inf?
                """
                if (x_grid < self.xmin and x_grid >= self.xmax) or (y_grid < self.ymin and y_grid >= self.ymax):
                    particle_ranges.append(self.laser_max_range)
                    check_if_obstacle_is_sensed = 1
                    break
                elif self.ogm_map[x_grid, y_grid] == 100:
                    particle_ranges.append(distance)
                    check_if_obstacle_is_sensed = 1
                    break

                distance += step

            if check_if_obstacle_is_sensed == 0:
                particle_ranges.append(self.laser_max_range)
            
        return particle_ranges

    # function which subsamples from the whole laser_input the laserscans which are needed for the measurement update
    # just self.eval_beams are needed and scans should be between between self.laser_min_range and self.laser_max_range
    def subsample_laser_scan(self, laser_scan_msg):
        
        subsample_rate = len(laser_scan_msg.ranges)/self.eval_beams
        subsampled_ranges = []
        for i in range(self.eval_beams):
            if laser_scan_msg.ranges[int(i*subsample_rate)] == inf:
                subsampled_ranges.append(self.laser_max_range)
            else:
                subsampled_ranges.append(laser_scan_msg.ranges[int(i*subsample_rate)])
        return subsampled_ranges

    # function calls self.subsample_laser_scan to get the laserscans from robot
    # function calls self.calls get_laser_scan_for_particles to calculate the laserscans for the particle in the argument
    # function then calculates the error between the scans
    def get_prediction_error(self, laser_scan_msg):
        subsampled_ranges = self.subsample_laser_scan(laser_scan_msg)
        for particle in self.particles:
            particle_ranges = self.get_laser_scan_for_particle(particle.x, particle.y, particle.yaw)
            diff_ranges = []
            for range_i in range(len(particle_ranges)):
                diff_ranges.append(abs(subsampled_ranges[range_i]-particle_ranges[range_i]))
            norm_error = np.linalg.norm(diff_ranges)
            error = pow(norm_error,2)
            rospy.loginfo(error)
            return error
                


    # function calculates the relative motion between the last and current odometry measurement
    # function therefore uses the difference of previous and current x,y position and yaw angle 
    def predict_particle_odometry(self, odom, last_odom):
        position = np.array([odom.pose.pose.position.x, odom.pose.pose.position.y, odom.pose.pose.position.z])
        last_position = np.array([last_odom.pose.pose.position.x, last_odom.pose.pose.position.y, last_odom.pose.pose.position.z])
        orientation = np.array([odom.pose.pose.orientation.x, odom.pose.pose.orientation.y, odom.pose.pose.orientation.z, odom.pose.pose.orientation.w])
        last_orientation = np.array([last_odom.pose.pose.orientation.x, last_odom.pose.pose.orientation.y, last_odom.pose.pose.orientation.z, last_odom.pose.pose.orientation.w])
        
        # multiplying current orientation with inverse previous orientation returns orientation difference in quternion form of orientation
        diff_orientation_quaternion = transform.quaternion_multiply(transform.quaternion_inverse(last_orientation), orientation)

        # transform quatermion form of ortientation to euler form of orientation (roll, pitch, yaw)
        _, _, yaw_diff = transform.euler_from_quaternion(diff_orientation_quaternion)

        # diff in position can be easly calculated by subtracting x,y,z coordinates
        diff_position = position-last_position

        self.dx = diff_position[0]
        self.dy = diff_position[1]
        self.dyaw = yaw_diff
        
        uncertainty_translation = np.random.normal(0, self.dynamics_translation_noise_std_dev)
        uncertainty_orientation = np.random.normal(0, self.dynamics_orientation_noise_std_dev)

        """
        particle.x = self.dx + uncertainty_translation
        particle.y = self.dy + uncertainty_translation
        particle.yaw = self.dyaw + uncertainty_orientation
        """

class MonteCarloLocalization(object):

    #initializes object of MonteCarloLocalization and sets all parameters
    def __init__(self, num_particles):

        #initialize ros node
        rospy.init_node('monte_carlo_localization')

        #load map from map_loader_node
        rospy.wait_for_service('get_map')
        try:
            get_map = rospy.ServiceProxy('get_map', GetMap)
            self.ogm = get_map(1)
        except rospy.ServiceException as e:
            print("Service call failed: %s"%e)
    
        # set variables
        self.last_laser_scan = None
        self.odometry = None
        self.last_odometry = None
        self.eval_beams = 32

        #read in parameters from launch ParticleFilter
        dynamics_translation_noise_std_dev   = rospy.get_param("~dynamics_translation_noise_std_dev")
        dynamics_orientation_noise_std_dev   = rospy.get_param("~dynamics_orientation_noise_std_dev")
        beam_range_measurement_noise_std_dev = rospy.get_param("~beam_range_measurement_noise_std_dev")

        # ParticleFilter
        self.pf = ParticleFilter(num_particles, self.ogm, 0, 0, 0, 0, 0, self.eval_beams, 
                                 dynamics_translation_noise_std_dev,
                                 dynamics_orientation_noise_std_dev,
                                 beam_range_measurement_noise_std_dev)

        self.pf.init_particles()

        #tf Transform
        self.t = tf.Transformer(True, rospy.Duration(10.0))
        self.listener = tf.TransformListener()

        # Subscribers (LaserScan, Odometry)
        self.laser_sub = rospy.Subscriber('/scan', LaserScan, self.laser_scan_callback, queue_size=1)
        self.odom_sub = rospy.Subscriber('/odom', Odometry,  self.odometry_callback, queue_size=1)

        # Publisher (MarkerArray to RVIZ showing all particles, (x,y,yaw) of most probable position)


    def laser_scan_callback (self, msg):
        self.pf.laser_min_angle = msg.angle_min
        self.pf.laser_max_angle = msg.angle_max
        self.pf.laser_min_range = msg.range_min
        self.pf.laser_max_range = msg.range_max

        subsampled_angles = np.linspace(msg.angle_min, msg.angle_max, self.eval_beams)
        self.pf.subsampled_angles = subsampled_angles
        
        if self.last_laser_scan:
            #header.stamp creates a timestamp where it concatinates secs and nsecs. dt is a nsecs value
            dt = msg.header.stamp - self.last_laser_scan.header.stamp
            self.pf.handle_observation(msg,dt)


        self.last_laser_scan = msg

    def odometry_callback(self, msg):
        """
        #transform from frame /odom to frame /base_link
        now = rospy.Time.now()
        self.listener.waitForTransform('/odom', '/base_link', now, rospy.Duration(4.0)) 
        pose_msg = PoseStamped()
        pose_msg.header.frame_id = msg.header.frame_id
        pose_msg.header.stamp = msg.header.stamp
        pose_msg.pose = msg.pose.pose
        self.odometry = self.listener.transformPose('/base_link', pose_msg)
  
        #call predict_particle_odometry
        if self.last_odometry:
            self.pf.predict_particle_odometry(self.odometry, self.last_odometry)
        self.last_odometry = self.odometry
        """
        self.odometry = msg
        if self.last_odometry:
            self.pf.predict_particle_odometry(self.odometry, self.last_odometry)
        self.last_odometry = self.odometry

    def run(self):
        rate = rospy.Rate(20)
        while not rospy.is_shutdown():
            rate.sleep()
    


if __name__ == '__main__':
    num_particles = 50
    mcl = MonteCarloLocalization(num_particles)
    mcl.run()




